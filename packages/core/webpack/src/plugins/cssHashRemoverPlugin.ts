type Compiler = import("webpack").Compiler;

class CssHashRemoverPlugin {
  options = {} as any;
  content = "";

  static defaultOptions = {
    outputFile: "css/index.css",
  };

  // Any options should be passed in the constructor of your plugin,
  // (this is a public API of your plugin).
  constructor(options = {}) {
    // Applying user-specified options over the default options
    // and making merged options further available to the plugin methods.
    // You should probably validate all the options here as well.
    this.options = { ...CssHashRemoverPlugin.defaultOptions, ...options };
  }

  apply(compiler: Compiler) {
    const pluginName = CssHashRemoverPlugin.name;

    // webpack module instance can be accessed from the compiler object,
    // this ensures that correct version of the module is used
    // (do not require/import the webpack or any symbols from it directly).
    const { webpack } = compiler;

    // Compilation object gives us reference to some useful constants.
    const { Compilation } = webpack;

    // RawSource is one of the "sources" classes that should be used
    // to represent asset sources in compilation.
    const { RawSource } = webpack.sources;

    // Tapping to the "thisCompilation" hook in order to further tap
    // to the compilation process on an earlier stage.
    compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
      // Tapping to the assets processing pipeline on a specific stage.
      compilation.hooks.processAssets.tap(
        {
          name: pluginName,

          // Using one of the later asset processing stages to ensure
          // that all assets were already added to the compilation by other plugins.
          stage: Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
        },
        (assets) => {
          const source = assets?.["./index.css"]?.source()?.toString();
          const matches = Array.from(
            source.matchAll(
              /(?:\.nimbus-[\w|-]+)(?:(__\w{7,}))(?:\:{0,2}(?:disabled|focus|active|hover)?) {$/gm
            ),
            (m) => m[1]
          );

          const uniqueMatches = [...new Set(matches)];

          this.content = source;
          uniqueMatches?.forEach((hash) => {
            const regex = new RegExp(`${hash}\\b`, "gm");
            this.content = this.content.replace(regex, "");
          });
          // "assets" is an object that contains all assets
          // in the compilation, the keys of the object are pathnames of the assets
          // and the values are file sources.

          // Iterating over all the assets and
          // generating content for our Markdown file.
          // Adding new asset to the compilation, so it would be automatically
          // generated by the webpack in the output directory.
          compilation.emitAsset(
            this.options.outputFile,
            new RawSource(this.content)
          );
        }
      );
    });
  }
}

export const cssHashRemoverPlugin = new CssHashRemoverPlugin();

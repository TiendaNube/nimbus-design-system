---
description: Use this rule whenever performing Create, Read, Edit (Update), or Delete operations on SVG icons in the project. This rule defines strict, step-by-step requirements for each operation.
globs: 
alwaysApply: false
---
# SVG Icon CRUD Steps

Follow each step strictly and in the given order, according to the requested operation: **Create, Read, Edit (Update), or Delete**.

----

## Pre-conditions (ALWAYS CHECK BEFORE CHANGES)
1. **Duplicate Check (for Create/Edit):**
   - For **Create**: Search for icons in the repository with strictly equal or visually similar names. If a match exists, notify the user and do not proceed.
   - For **Edit/Delete**: Ensure the target icon exists. If not, report to user and do not proceed.

2. **SVG Quality & Optimization Check (for Create/Edit):**
   - Analyze SVG for bad practices: excessive/unnecessary elements, comments, or metadata.
   - If issues are found, recommend users to use SVGOMG (https://jakearchibald.github.io/svgomg/) and output the feedback.
   - If missing `width`/`height`/`viewBox`/`fill` attributes, add them (`width="16" height="16" viewBox="0 0 16 16" fill="currentColor"`).
    - General main svg element example: 
    ```xml
        <svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
          <!-- SVG paths/elements go here -->
        </svg>
    ```
----
## ðŸš¦ Operations

### **Read (List Icons)**
- List all icon files in `packages/icons/src/assets`.
- List the icon names in **PascalCase format**, sorted alphabetically.
- Output the list.

----

### **Create**
1. **File Creation**
   - Create the new SVG file in `packages/icons/src/assets`, lowercase and dash-separated (e.g., `shopping-cart.svg`).
   - Exported icon component should be PascalCase + "Icon" (e.g., `ShoppingCartIcon`).
2. **SVG Attributes**
   - Maintain required attributes: `width="16" height="16" viewBox="0 0 16 16" fill="currentColor"`.
3. **Continue with Changelog, Yarn versioning (as a MINOR bump), and PR steps below.**

----

### **Edit (Update)**
1. **Locate SVG file by input name** in `packages/icons/src/assets`.
2. **DELETE** the existing SVG file.
3. **CREATE** a new SVG file with the same name, and EXACTLY the same SVG code as the one provided by the user, except for the `width`, `height`, and `viewBox` attributes. Follow the **Create** operation steps.
   - Maintain required attributes: `width="16" height="16" viewBox="0 0 16 16" fill="currentColor"`.
4. **Continue with Changelog, Yarn versioning (as a PATCH bump), and PR steps below.**

----

### **Delete**
1. **Locate SVG file by input name** in `packages/icons/src/assets`.
2. **Delete** the SVG file.
3. **Continue with Changelog, Yarn versioning (as a MAJOR bump), and PR steps below.**

----

## **Required Steps**
### 1. **Yarn versioning file**
1.1. Run `yarn workspaces foreach --all version decline --deferred` to create a new version file in `.yarn/versions` declining by default everything. *THIS STEP IS CRITICAL*.

1.2. In the generated file inside `.yarn/versions` move the `@nimbus-ds/icons` package into the releases section with a version bump *depending on the type of the change*. Example:

```yml
releases:
  @nimbus-ds/icons: patch/minor/major

declined: 
    nimbus-design-system
    ...rest of the packages
```
* PATCH for updates. MINOR for additions. MAJOR for deletions.
* ALWAYS decline the `nimbus-design-system` root package and all packages that are not `@nimbus-ds/icons`.

1.3. Run `yarn bump:check` and read the errors.

### 2. **Changelog updates**

* Update the `packages/icons/CHANGELOG.md` file with the new icon.

#### General Structure

```md
## YYYY-MM-DD `VERSION` (with TODAY'S DATE) (patch/minor/major version bump from the previous version) 

#### ðŸŽ‰ New features

- Adds/Creates/Deletes `[icon-name]` icon. (#PR_NUMBER by @NimbusAgent)
```

Note: The PR_NUMBER text should be the number of the current PR that creates the icon (following step). It should be the latest PR number in this Github repository plus one.

### 3. **PR Creation:**
   - Commit using the format: `feat(icons): add [icon-name] icon` (or `feat(icons): update [icon-name] icon` or `feat(icons): delete [icon-name] icon`)
   - Always create a branch from the latest `main`.
   - Push branch and open a PR titled: `feat: Add [icon-name] icon` (or `feat: Update [icon-name] icon` or `feat: Delete [icon-name] icon`).

## **Never Do the Following**
* Do not place icon files outside of `packages/icons/src/assets`.
* Do not omit `width` and `height` attributes.
* Do not use uppercase letters or underscores in filenames.
* Do not directly commit changes to `main`. Always use a dedicated branch FROM MAIN and open a PR.
* NEVER run `yarn bump:check --interactive`. Modify the version file manually instead.
* ALWAYS write EXACTLY the same SVG code as the one provided by the user, except for the `width`, `height`, and `viewBox` attributes.
